Grigore Rosu, Programming Languages / Formal Methods / Software Engineering, Ph.D. in Computer Science, University of California at San Diego, 2000 Thesis:  “Hidden Logic”. Department of Computer Science and Engineering, University of California at San Diego, 4 September 2000. M.S. in Fundamentals of Computing, University of Bucharest, Romania, 1996 B.A. in Mathematics, University of Bucharest, Romania, 1995 Ph.D. in Computer Science, University of California at San Diego, 2000 Thesis:  “Hidden Logic”. Department of Computer Science and Engineering, University of California at San Diego, 4 September 2000. M.S. in Fundamentals of Computing, University of Bucharest, Romania, 1996 B.A. in Mathematics, University of Bucharest, Romania, 1995 Biography Grigore Rosu does research in design, semantics and implementation of programming and specification languages, automated software engineering and formal methods, especially push-button techniques for certification, monitoring, synthesis and modularization, and in automated reasoning about computer systems, applications of logics, theorem proving, algorithms, (co)algebra, and category theory.  He teaches classes on software engineering, programming languages, formal methods, and runtime verification.  Before joining UIUC in 2002, he was a research scientist at NASA Ames.  He obtained his Ph.D. at the University of California at San Diego in 2000 and his M.S. at the University of Bucharest, Romania, in 1996.   Grigore was offered the CAREER award by the NSF in 2005, the outstanding junior award by the CS Department at UIUC in 2005, and the Dean's award for excellence in research by the College of Engineering at UIUC in 2014.  He won the ASE IEEE/ACM most influential paper award in 2016 and the RV test of time award for papers published in 2001 that shaped the runtime verification field, and distinguished/best paper awards at ASE 2008, ASE 2016, OOPSLA 2016, ETAPS 2002.  He was ranked a UIUC excellent teacher in Spring 2013, Fall 2012, Spring 2008 and Fall 2004. Rosu is known for work in runtime verification, the K framework, matching logic, and automated coinduction. Runtime verification was coined by Havelund and Rosu as the name of a workshop they started in 2001, aimed at addressing problems at the boundary between formal verification and testing.  Since 2001,   runtime verification  (RV) has grown into an active and diverse community, with its own international conference.  The underlying idea of RV is to verify a system while it executes, where the system is either instrumented or simulated in an environment in which efficient monitors are generated from specifications and checked against the running system.  Combined with recovery when properties are violated, RV can be used as a scalable alternative to formal verification, yielding the same correctness guarantees but at a cost fraction.  Runtime verification has got significant traction in the formal verification and software engineering communities, where major conferences include special tracks named Runtime Verification.  Within the RV field, Rosu and his collaborators introduced several notions, seminal algorithms and techniques for parametric property monitoring, efficient monitor synthesis, runtime predictive analysis, as well as monitoring-oriented programming as a programming paradigm where a formal specification and an implementation form together a (runtime verified) system.  In 2010, Rosu founded the company Runtime Verification, Inc. , as a vehicle to productize and commercialize RV technology to customers such as NASA, Boeing, Toyota, Denso, as well as emerging companies in the blockchain space such as Ethereum Foundation, IOHK, Tezos, Algorand, Maker, Gnosis, etc. Runtime verification runtime verification Runtime Verification, Inc. The  K framework  was proposed by Rosu together with his FSL lab in 2003, as an executable semantic framework.  Programming languages, type systems and formal analysis tools can be defined uniformly in the K framework, using configurations, computations and rewrite rules.  The distinctive feature of K is that once a system is formalized as a K definition, all the tools needed for that system, from concrete execution engines (interpreters, virtual machines (VMs), compilers) to symbolic execution and formal verification tools, can and should be derived automatically or semi-automatically, correct-by-construction.  The goal of K is to put an end to the adhoc language tool development.  Several complete semantics of real-life programming languages, such as C, Java, JavaScript, Python, and the Ethereum Virtual Machine, have been formally defined in K. K framework FSL lab K framework C Java JavaScript Python Ethereum Virtual Machine Matching logic is a unifying logic for programming languages, specification, and verification.   Matching logic is as expressive as first-order logic (FOL) plus induction, but it provides a compact notation that captures, as syntactic sugar, several logics and formalisms of critical importance such as: algebraic specification and initial algebra semantics, FOL with least fixed points , typed or untyped lambda-calculi, dependent type systems, separation logic with recursive predicates, rewriting logic, Hoare logic, temporal logics, dynamic logic, modal μ-calculus, and so on. Matching logic Matching logic Rosu proposed circular coinduction in his PhD thesis, as an automation of coinduction in the context of hidden logic.  This was further generalized into a principle that unifies and automates proofs by both induction and coinduction, and has been implemented or incorporated in provers such as Coq, Isabelle/HOL, and CIRC. circular coinduction PhD thesis CIRC Other Professional Employment President & CEO.  Runtime Verification, Inc.  2010 to present. Visiting Researcher. Microsoft Research, Redmond, Washington. On sabbatical leave from the University of Illinois. August to December 2008. Research Scientist. NASA Ames Research Center, California, USA. Automated Software Engineering Group. Hired by the Research Institute for Advanced Computer Science of the Universities Space Research Association, 2000-2002. President & CEO.  Runtime Verification, Inc.  2010 to present. Visiting Researcher. Microsoft Research, Redmond, Washington. On sabbatical leave from the University of Illinois. August to December 2008. Research Scientist. NASA Ames Research Center, California, USA. Automated Software Engineering Group. Hired by the Research Institute for Advanced Computer Science of the Universities Space Research Association, 2000-2002. , Software and software related aspects., Design, semantics and implementation of programming and specification languages., Automated software engineering and formal methods, especially "push-button" techniques for certification, monitoring synthesis and modularization., Automated reasoning about computer systems, applications of logics, Theorem proving.  Algorithms, (co)algebra, category theory.